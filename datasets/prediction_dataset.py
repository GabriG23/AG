import torch
import util
import torchvision.transforms as transforms
from PIL import Image

# Dataset per le predictions di ogni query

def open_image(path):
    return Image.open(path).convert("RGB")

class DatasetQP(torch.nn.Module):                                                           # un altro dataset per calcolare le coppie query-positives
    def __init__(self, model, global_features_dim, geoloc_train_dataset, qp_threshold):     # questo pairs è usato nella weakly supervised loss
        """Dataset used to compute pairs of query-positive. These pairs are then
        used in the weakly supervised losses (consistency and features-wise).
        
        Parameters
        ----------
        model : nn.Module, used to compute the query-positive pairs.
        global_features_dim : int, dimension of the global features generated by the model.
        geoloc_train_dataset : dataset_geoloc.GeolocDataset, containing the queries and gallery images.
        threshold : float, only pairs with distance (in features space) below
            the given threshold will be taken into account.
        """
        
        super().__init__()
        # Compute predictions with the given model on the given dataset
        _, _, predictions, correct_bool_mat, distances = util.compute_features(geoloc_train_dataset, model, global_features_dim)    # calcola le predizioni passando il dataset, il modello e la dimensione
        
        num_preds = predictions.shape[1]                                                                # prende il numero di predizioni
        real_positives = [[] for _ in range(geoloc_train_dataset.queries_num)]                          # crea una lista di dimensione delle queries
        
        # In query_positive_distances saves the index of query, positive, and their distance
        # for each query-positive pair
        query_positive_distances = []                                                                 # salva l'indice della query, positive e la loro distanza
        for query_index in range(geoloc_train_dataset.queries_num):                                   # itera per tutte le query
            query_path = geoloc_train_dataset.queries_paths[query_index]                              # prende il path
            for pred_index in range(num_preds):                                                       # calcola la predizione corrente
                if correct_bool_mat[query_index, pred_index] == 1:                                    # non ho ancora capito questo correc_bool_mat, vede se il valore della matrice corrispondente ai due indici è uguale a 1?
                    distance = distances[query_index, pred_index]                                     # prende la distanza dalla matrice delle distance
                    positive = predictions[query_index, pred_index]                                   # prende il positive 
                    positive_path = geoloc_train_dataset.gallery_paths[positive]                      # prende il path
                    real_positives[query_index].append(positive_path)                                 # salva il real positive
                    query_positive_distances.append((query_path, positive_path, distance))            # salva l'indice della query, il positivo e la loro distanza
        # Filter away the query-positive pairs which are further than qp_threshold from each other
        self.query_positive_distances = [qpd for qpd in query_positive_distances if qpd[2] < qp_threshold]      # filtra la query dalle distanze troppo lontane

        self.base_transform = transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),    # stessa mean e std del train
        ])

    def __getitem__(self, index):
        query_path, positive_path, _ = self.query_positive_distances[index]
        query = open_image(query_path)
        source_query = self.base_trasform(query)   
        positive = open_image(positive_path)
        source_positive = self.base_trasform(query)   
        return source_query, source_positive
    
    def __len__(self):
        return len(self.query_positive_distances)
